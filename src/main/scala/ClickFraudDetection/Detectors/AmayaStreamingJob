/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.myorg.quickstart

import org.apache.flink.api.common.typeinfo.TypeInformation
import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode
import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode
import org.apache.flink.streaming.api.functions.AssignerWithPunctuatedWatermarks
import org.apache.flink.streaming.api.scala._
import org.apache.flink.streaming.api.watermark.Watermark
import org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer
import org.apache.flink.streaming.util.serialization.JSONKeyValueDeserializationSchema

import java.util.Properties


/**
 * Skeleton for a Flink Streaming Job.
 *
 * For a tutorial how to write a Flink streaming application, check the
 * tutorials and examples on the <a href="https://flink.apache.org/docs/stable/">Flink Website</a>.
 *
 * To package your application into a JAR file for execution, run
 * 'mvn clean package' on the command line.
 *
 * If you change the name of the main class (with the public static void main(String[] args))
 * method, change the respective entry in the POM.xml file (simply search for 'mainClass').
 */
object StreamingJob {
  def main(args: Array[String]) {

    //Create a stream execution environment
    //The execution environment is how you set properties for your Job, create your sources, and finally trigger the execution of the Job.
    val env = StreamExecutionEnvironment.getExecutionEnvironment

    //Create a Kafka consumer object to consume messages from Kafka
    val properties= new Properties()
    properties.setProperty("bootstrap.servers", "localhost:9092")
    properties.setProperty("group.id", "fraud")

    implicit val typeInfo: TypeInformation[String] = {
      TypeInformation.of(classOf[(String)])
    }
    
    // Set up timestamps and watermarks
    class PunctuatedAssigner extends AssignerWithPunctuatedWatermarks[JsonNode] {
      override def extractTimestamp(element: JsonNode, previousElementTimestamp: Long): Long = {
        //element.get("timestamp").asLong()*1000
        element.get("timestamp").asLong()*1000 //timestamp = date and time in seconds, we convert it to ms
      }
      override def checkAndGetNextWatermark(lastElement: JsonNode, extractedTimestamp: Long): Watermark = {
        new Watermark(extractedTimestamp)
      }
    }

    val clicks_json = new FlinkKafkaConsumer(
      "clicks", // topic name
      new JSONKeyValueDeserializationSchema(false),
      properties// `bootstrap.servers` and `group.id` required
    )

    val stream_clicks : DataStream[ObjectNode] = env.addSource(clicks_json).name("clicks")
    val value_clicks : DataStream[JsonNode] = stream_clicks.map {value => value.get("value") }
    val punctuated_clicks : DataStream[JsonNode] = value_clicks.assignTimestampsAndWatermarks(new PunctuatedAssigner)

    val displays_json = new FlinkKafkaConsumer(
      "displays", // topic name
      new JSONKeyValueDeserializationSchema(false),
      properties// `bootstrap.servers` and `group.id` required
    )

    val stream_displays : DataStream[ObjectNode] = env.addSource(displays_json).name("displays")
    val value_displays : DataStream[JsonNode] = stream_displays.map {value => value.get("value") }
    val punctuated_displays : DataStream[JsonNode] = value_displays.assignTimestampsAndWatermarks(new PunctuatedAssigner)


    //AmayaFilter2.build(punctuated_clicks, punctuated_displays, 5)
    //OurPattern1_v0.build(punctuated_clicks, 2)
    //OurPattern2_v0.build(punctuated_clicks, punctuated_displays, 5)
    OurPattern3_v0.build(punctuated_clicks, punctuated_displays, 10, 5)

    /*
    val alerts: DataStream[JsonNode] = value_clicks
      //.keyBy(d => (d.get("uid").asText(), d.get("ip").asText()))
      .keyBy(d => d.get("uid").asText())
      //.window(TumblingEventTimeWindows.of(Time.seconds(5)))
      .process(new OurPattern4_v3).setParallelism(1)
    val output = alerts.filter(event => event.flagState == True)
    alerts.print()
    */

    // execute program
    env.execute("Flink Streaming Scala API Skeleton")
  }

}
